trigger:
- master

pr:
- master

stages:

- stage: build

  variables:
    nodeVersion: 13.x
    appDir: Calm

  jobs:

  - job: build

    pool:
      vmImage: ubuntu-latest

    steps:
    

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: 'docker-compose.prod.yml'
        action: 'Build services'
      displayName: docker-compose build

  - job: test

    pool:
      vmImage: ubuntu-latest

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: node $(nodeVersion)

    - script: npm ci
      workingDirectory: $(appDir)
      displayName: npm install

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'Calm Client'
        organization: '2002-feb24-net'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliprojectKey: '2002-feb-net_Calm Client'
        cliprojectName: 'Calm Client'
        cliSources: '$(appDir)/src'
        extraProperties: |
          sonar.coverage.exclusions=**/*.spec.ts
          sonar.typescript.lcov.reportPaths=$(appDir)/coverage/$(appDir)/lcov.info
      displayName: sonarcloud analysis prepare

    - script: npx ng test --browsers ChromeHeadless --no-watch --code-coverage
      workingDirectory: $(appDir)
      displayName: ng test

    - script: npm run lint
      workingDirectory: $(appDir)
      displayName: ng lint

    - task: SonarCloudAnalyze@1
      displayName: sonarcloud analysis run

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
      displayName: sonarcloud results build publish

- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: build

  jobs:

  - deployment: deploy_dev

    pool:
      vmImage: ubuntu-latest

    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:

         
          - checkout: self

          - download: none

          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Container Registry'
              dockerComposeFile: 'docker-compose.prod.yml'
              action: 'Build services'
            displayName: docker-compose build

          - task: DockerCompose@0
            inputs:
              containerregistrytype: 'Container Registry'
              dockerRegistryEndpoint: 'CalmClient'
              dockerComposeFile: 'docker-compose.prod.yml'
              action: 'Push services'
            displayName: docker-compose push

          - task: AzureWebAppContainer@1
            inputs:
              # ConnectionType: AzureRM
              azureSubscription: 'Azure subscription 1(34c1f765-2be7-443c-b6cc-1dfb59828d08)'
              # appType: webApp
              appName: 'calm-client'
              # packageForLinux: $(Pipeline.Workspace)/app
              multicontainerConfigFile: 'docker-compose.prod.yml'
            displayName: azure app service deploy

